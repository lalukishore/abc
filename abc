RateLimiter with Resilance4j and redis:

import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Component;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class LimiterManager {
    private final RedisTemplate<String, String> redisTemplate;
    private final Duration limitRefreshPeriod;
    private final Map<String, LocalDateTime> userLastRefreshTimeMap = new ConcurrentHashMap<>();

    public LimiterManager(RedisTemplate<String, String> redisTemplate, Duration limitRefreshPeriod) {
        this.redisTemplate = redisTemplate;
        this.limitRefreshPeriod = limitRefreshPeriod;
    }

    public void updateIdentifierCount(String clientIdentifier) {
        LocalDateTime lastRefreshTime = userLastRefreshTimeMap.get(clientIdentifier);
        LocalDateTime currentTime = LocalDateTime.now();

        // Reset hit count if the limitRefreshPeriod has passed since the last refresh
        if (lastRefreshTime == null || lastRefreshTime.plus(limitRefreshPeriod).isBefore(currentTime)) {
            userLastRefreshTimeMap.put(clientIdentifier, currentTime);
            resetHitCount(clientIdentifier);
        }

        // Increment hit count in Redis
        redisTemplate.opsForHash().increment("hitCounts", clientIdentifier, 1);
    }

    private void resetHitCount(String clientIdentifier) {
        redisTemplate.opsForHash().put("hitCounts", clientIdentifier, "0");
    }

    public int getIdentifierCount(String clientIdentifier) {
        Object hitCountObj = redisTemplate.opsForHash().get("hitCounts", clientIdentifier);
        if (hitCountObj != null) {
            return Integer.parseInt(hitCountObj.toString());
        } else {
            return 0;
        }
    }
}


-------------------------------------------------------------------------------------------------------------------
app.properties:

spring.redis.host=localhost
spring.redis.port=6379
------------------------------------------------------------------

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.StringRedisSerializer;

@Configuration
public class RedisConfig {

    @Bean
    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory connectionFactory) {
        RedisTemplate<String, String> redisTemplate = new RedisTemplate<>();
        redisTemplate.setConnectionFactory(connectionFactory);
        redisTemplate.setKeySerializer(new StringRedisSerializer());
        redisTemplate.setValueSerializer(new StringRedisSerializer());
        redisTemplate.setHashKeySerializer(new StringRedisSerializer());
        redisTemplate.setHashValueSerializer(new StringRedisSerializer());
        return redisTemplate;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
RateLimiter with Bucket4j and Redis

import io.github.bucket4j.Bandwidth;
import io.github.bucket4j.Bucket;
import io.github.bucket4j.Bucket4j;
import io.github.bucket4j.grid.ProxyManager;
import io.github.bucket4j.grid.RecoveryStrategy;
import io.github.bucket4j.grid.hazelcast.Hazelcast;
import io.github.bucket4j.grid.jcache.JCache;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import javax.annotation.PostConstruct;
import javax.cache.Cache;
import javax.cache.CacheManager;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class LimiterManager {
    private static final int MAX_REQUESTS_PER_SECOND = 1000;
    private static final String CACHE_NAME = "user-rate-limits";

    @Autowired
    private CacheManager cacheManager;

    private ProxyManager<String> buckets;

    @PostConstruct
    public void initialize() {
        Cache<String, Bucket> cache = cacheManager.getCache(CACHE_NAME);
        this.buckets = JCache.via(cache).proxyManager();
    }

    public boolean isAllowed(String userId) {
        Bucket bucket = buckets.getProxy(userId, () -> {
            Bandwidth limit = Bandwidth.simple(MAX_REQUESTS_PER_SECOND, Duration.ofSeconds(1));
            return Bucket4j.builder().addLimit(limit).build();
        });

        return bucket.tryConsume(1);
    }
}
 
